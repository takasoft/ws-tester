{"version":3,"sources":["Navbar.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","props","Navbar","bg","variant","Container","Brand","to","activeClassName","packageJson","version","Nav","Link","target","href","React","Component","getTime","today","Date","getHours","getMinutes","getSeconds","App","state","ws","url","msg","history","connected","WebSocket","this","setState","direction","time","type","data","that","onerror","e","onclose","code","onopen","console","log","onmessage","JSON","parse","send","Fragment","Row","InputGroup","size","FormControl","placeholder","aria-label","aria-describedby","value","onChange","evt","handleUrlChange","Append","Button","onClick","connect","className","Table","striped","bordered","hover","map","val","idx","src","mode","theme","handleMsgChange","name","editorProps","$blockScrolling","maxLines","minLines","width","readOnly","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd5883c4.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Container from 'react-bootstrap/Container';\nimport { FaGithub } from 'react-icons/fa';\n\nimport packageJson from '../package.json';\n\nclass MyNavbar extends React.Component{\n  constructor(props) {\n    super(props)\n  }\n\n  render(){\n    return(\n      <Navbar bg=\"light\" variant=\"light\">\n        <Container>\n          <Navbar.Brand to='' activeClassName=\"active\">WS Tester <small>ver. {packageJson.version}</small></Navbar.Brand>\n          <Nav>\n            <Nav.Link target=\"_blank\" href=\"https://github.com/takasoft/ws-tester\">\n              <FaGithub />\n            </Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nexport default MyNavbar;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\n\nimport ReactJson from 'react-json-view';\n\nimport './App.css';\nimport Navbar from './Navbar';\n\nfunction getTime() {\n  const today = new Date();\n  return today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n}\n\nclass App extends React.Component {\n  state = {\n    ws: null,\n    url: \"wss://echo.websocket.org\",\n    msg: '',\n    history: [],\n    connected: false\n  }\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n\n  }\n\n  connect() {\n\n    const ws = new WebSocket(this.state.url); \n    this.setState({ws});\n\n    this.setState({history: [\n      ...this.state.history,\n      {\n        direction: 'INFO',\n        time: getTime(),\n        type: 'str',\n        data: 'Connecting to ' + this.state.url\n      }\n    ]});\n\n    const that = this;\n\n    ws.onerror = (e) => {\n      that.setState({history: [\n        ...that.state.history,\n        {\n          direction: 'ERROR',\n          time: getTime(),\n          type: 'str',\n          data: e.data\n        }\n      ]});\n    }\n\n    ws.onclose = (e) => {\n      that.setState({history: [\n        ...that.state.history,\n        {\n          direction: 'CLOSE',\n          time: getTime(),\n          type: 'str',\n          data: 'code=' + e.code\n        }\n      ]});\n    }\n            \n    ws.onopen = () => {\n      console.log('CONNECTED: ' + that.state.url)\n\n      that.setState({history: [\n        ...that.state.history,\n        {\n          direction: 'INFO',\n          time: getTime(),\n          type: 'str',\n          data: 'Connected to ' + that.state.url\n        }\n      ], connected: true});\n    };\n            \n    \n    ws.onmessage = (e) => {\n\n      console.log(\"RECIEVED: \"+ e.data);\n      let data = e.data;\n      let type = 'str';\n      try {\n        data = JSON.parse(e.data);\n        type = 'json';\n      } catch(e) {\n\n      }\n      that.setState({history: [\n        ...that.state.history,\n        {\n          direction: 'RECEIVED',\n          time: getTime(),\n          type, data\n        }\n      ]})\n    };\n  }\n\n  send() {\n    console.log(\"SENT: \"+ this.state.msg);\n    this.state.ws.send(this.state.msg);\n  }\n\n  handleUrlChange(url) {\n    this.setState({url});\n  }\n\n  handleMsgChange(msg) {\n    this.setState({msg});\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <Container>\n          <Row>\n            <InputGroup size=\"sm\">\n              <FormControl\n                placeholder=\"URL\"\n                aria-label=\"URL\"\n                aria-describedby=\"url\"\n                value={this.state.url}\n                onChange={(evt) => this.handleUrlChange(evt.target.value)}\n              />\n              <InputGroup.Append>\n                <Button \n                  variant=\"primary\" \n                  onClick={() => this.connect()}\n                >\n                  {this.state.connected ? 'Disconnect' : 'Connect'}\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Row>\n          \n          <Row>\n          <div className=\"log-table-wrapper\">\n            <Table striped bordered hover size=\"sm\">\n              <thead>\n                <tr>\n                  <th>Time</th>\n                  <th>Type</th>\n                  <th>Data</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  this.state.history.map((val,idx) => {\n                    return (\n                      <tr>\n                        <td>{val.time}</td> \n                        <td>{val.direction}</td>\n                        <td>\n                          {val.type == 'str' ? (\n                            <pre>{val.data}</pre>\n                          ) : (\n                            <ReactJson src={val.data} />\n                          )}\n                        </td>\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </Table>\n          </div>\n          </Row>\n\n          \n          <Row>\n\n          <div className=\"msg-div\">\n            <AceEditor\n              mode=\"javascript\"\n              theme=\"github\"\n              value={this.state.msg}\n              onChange={(evt) => this.handleMsgChange(evt)}\n              name=\"UNIQUE_ID_OF_DIV\"\n              editorProps={{ $blockScrolling: true }}\n              maxLines={10}\n              minLines={3}\n              width=\"100%\"\n              readOnly={!this.state.connected}\n            />\n            <Button \n              variant=\"primary\" \n              onClick={() => this.send()}\n              disabled={!this.state.connected}\n            >\n              Send\n            </Button>\n          </div>\n\n          </Row>\n\n          \n        </Container>\n      </React.Fragment>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}