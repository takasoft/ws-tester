{"version":3,"sources":["Navbar.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","Navbar","bg","variant","id","Container","Brand","to","packageJson","version","Nav","Link","target","href","React","Component","logTableHeightOrg","window","innerHeight","editorMaxLines","editorMinLines","editorLineHeight","getTime","today","Date","getHours","getMinutes","getSeconds","App","state","ws","url","msg","history","logViewHeight","refLogView","createRef","evtType","data","dataType","JSON","parse","e","this","setState","time","current","scrollTop","scrollHeight","readyState","WebSocket","OPEN","close","addHistory","that","onerror","onclose","code","onopen","onmessage","send","numLines","split","length","Row","noGutters","Col","InputGroup","size","FormControl","placeholder","aria-label","aria-describedby","value","onChange","evt","handleUrlChange","onKeyDown","keyCode","connect","Append","Button","onClick","disabled","CONNECTING","ref","style","minHeight","Table","map","val","idx","key","className","src","name","displayObjectSize","displayDataTypes","enableClipboard","mode","theme","handleMsgChange","editorProps","$blockScrolling","maxLines","minLines","width","readOnly","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.017448c8.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport { FaGithub } from 'react-icons/fa';\n\nimport packageJson from '../package.json';\n\nclass MyNavbar extends React.Component {\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  render(){\n    return(\n      <Navbar bg=\"light\" variant=\"light\" id=\"main-navbar\">\n        <Container>\n          <Navbar.Brand to=''>\n            WS Tester <small>ver. {packageJson.version}</small>\n          </Navbar.Brand>\n          <Nav>\n            <Nav.Link target=\"_blank\" href=\"https://github.com/takasoft/ws-tester\">\n              <FaGithub />\n            </Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nexport default MyNavbar;\n","import React, {Fragment} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\n\nimport ReactJson from 'react-json-view';\n\nimport './App.css';\nimport Navbar from './Navbar';\n\n\n// calc for css doesn't work here\nconst logTableHeightOrg = window.innerHeight - 60 - 31 - 42;\nconst editorMaxLines = 10;\nconst editorMinLines = 3;\nconst editorLineHeight = 14;\n\nfunction calcLogViewHeight(numLines) {\n  if(numLines <= editorMinLines) return logTableHeightOrg;\n  if(numLines > editorMaxLines) numLines = editorMaxLines;\n  const editorExtraHeight = editorLineHeight * (numLines - editorMinLines);\n  return logTableHeightOrg - editorExtraHeight;\n}\n\nfunction getTime() {\n  const today = new Date();\n  return today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n}\n\nclass App extends React.Component {\n  state = {\n    ws: null,\n    url: \"wss://echo.websocket.org\",\n    msg: '',\n    history: [],\n    logViewHeight: logTableHeightOrg+\"px\",\n  }\n  refLogView = React.createRef()\n\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    \n  }\n\n  addHistory(evtType, data) {\n    let dataType = 'str';\n    try {\n      data = JSON.parse(data);\n      dataType  = 'json';\n    } catch(e) {\n\n    }\n\n    this.setState({history: [\n      ...this.state.history,\n      {\n        time: getTime(),\n        evtType, dataType, data\n      }\n    ]}, () => {\n      // always scroll to the bottom\n      this.refLogView.current.scrollTop = this.refLogView.current.scrollHeight;\n    });\n  }\n\n  connect() {\n    if(this.state.ws && this.state.ws.readyState === WebSocket.OPEN) {\n      this.state.ws.close();\n      this.setState({ws: null});\n      return;\n    }\n\n\n    const ws = new WebSocket(this.state.url); \n    this.setState({ws});\n\n    this.addHistory('INFO', 'Connecting to ' + this.state.url);\n\n    const that = this;\n\n    ws.onerror = (e) => {\n      that.addHistory('ERROR', e.data);\n    }\n\n    ws.onclose = (e) => {\n      that.addHistory('CLOSE', 'code='+e.code);\n    }\n            \n    ws.onopen = () => {\n      that.addHistory('INFO', 'Connected to ' + that.state.url);\n    };\n            \n    ws.onmessage = (e) => {\n      that.addHistory('RECIEVED', e.data);\n    };\n  }\n\n  send() {\n    this.state.ws.send(this.state.msg);\n    this.addHistory('SENT', this.state.msg);\n  }\n\n  handleUrlChange(url) {\n    this.setState({url});\n  }\n\n  handleMsgChange(msg) {\n    const logViewHeight = calcLogViewHeight(msg.split(\"\\n\").length)+\"px\";\n    //console.log(logViewHeight, this.state.logViewHeight);\n    this.setState({msg, logViewHeight}, () => {\n      // always scroll to the bottom\n      this.refLogView.current.scrollTop = this.refLogView.current.scrollHeight;\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Navbar />\n        <Container id=\"app-container\">\n          <Row noGutters={true} id=\"row_main\">\n            <Col id=\"col_main\">\n              <InputGroup size=\"sm\" id=\"url-input-container\">\n                <FormControl\n                  placeholder=\"URL\"\n                  aria-label=\"URL\"\n                  aria-describedby=\"url\"\n                  value={this.state.url}\n                  onChange={(evt) => this.handleUrlChange(evt.target.value)}\n                  onKeyDown={(e) => {if(e.keyCode === 13) this.connect()}}\n                />\n                <InputGroup.Append>\n                  <Button \n                    variant=\"primary\" \n                    onClick={() => this.connect()}\n                    disabled={this.state.ws && this.state.ws.readyState === WebSocket.CONNECTING}\n                  >\n                    {(this.state.ws && this.state.ws.readyState === WebSocket.OPEN) ? 'Disconnect' : 'Connect'}\n                  </Button>\n                </InputGroup.Append>\n              </InputGroup>\n\n              <div id=\"log-table-container\" ref={this.refLogView} style={{minHeight: this.state.logViewHeight}}> \n                <Table size=\"sm\" id=\"log-table\">\n                  {/* <thead>\n                    <tr>\n                      <th>Time</th>\n                      <th>Event</th>\n                      <th>Data</th>\n                    </tr>\n                  </thead> */}\n                  <tbody>\n                    {\n                      this.state.history.map((val,idx) => {\n                        return (\n                          <tr key={idx}>\n                            <td>{val.time}</td> \n                            <td>{val.evtType}</td>\n                            <td className=\"data-col\">\n                              {val.dataType === 'str' ? (\n                                <pre>{val.data}</pre>\n                              ) : (\n                                <ReactJson src={val.data} name={null} displayObjectSize={false} displayDataTypes={false} enableClipboard={false} />\n                              )}\n                            </td>\n                          </tr>\n                        )\n                      })\n                    }\n                  </tbody>\n                </Table>\n              </div>\n              \n              <div id=\"msg-div\">\n                <div id=\"msg-editor-div\">\n                  <AceEditor\n                    mode=\"javascript\"\n                    theme=\"github\"\n                    value={this.state.msg}\n                    onChange={(data) => this.handleMsgChange(data)}\n                    name=\"msg-editor\"\n                    editorProps={{ $blockScrolling: true }}\n                    maxLines={editorMaxLines}\n                    minLines={editorMinLines}\n                    width=\"100%\"\n                    readOnly={!(this.state.ws && this.state.ws.readyState === WebSocket.OPEN)}\n                  />\n                </div>\n                <Button \n                  variant=\"primary\" \n                  size=\"sm\"\n                  onClick={() => this.send()}\n                  disabled={!(this.state.ws && this.state.ws.readyState === WebSocket.OPEN)}\n                  id=\"msg-submit\"\n                >\n                  Send\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}